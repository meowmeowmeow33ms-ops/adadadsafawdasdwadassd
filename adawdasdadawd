local Converted = {
	["_Flow"] = Instance.new("ScreenGui");
	["_Container"] = Instance.new("Frame");
	["_Frame"] = Instance.new("Frame");
	["_UICorner"] = Instance.new("UICorner");
	["_Header"] = Instance.new("Frame");
	["_UICorner1"] = Instance.new("UICorner");
	["_Client"] = Instance.new("TextLabel");
	["_UITextSizeConstraint"] = Instance.new("UITextSizeConstraint");
	["_SearchBar"] = Instance.new("Frame");
	["_UICorner2"] = Instance.new("UICorner");
	["_Input"] = Instance.new("TextBox");
	["_UITextSizeConstraint1"] = Instance.new("UITextSizeConstraint");
	["_UIPadding"] = Instance.new("UIPadding");
	["_IconBG"] = Instance.new("ImageLabel");
	["_Icon"] = Instance.new("ImageLabel");
	["_Tabs"] = Instance.new("ScrollingFrame");
	["_UIListLayout"] = Instance.new("UIListLayout");
	["_Tab"] = Instance.new("TextButton");
	["_UICorner3"] = Instance.new("UICorner");
	["_Icon1"] = Instance.new("ImageLabel");
	["_Title"] = Instance.new("TextLabel");
	["_UITextSizeConstraint2"] = Instance.new("UITextSizeConstraint");
	["_Sections"] = Instance.new("Folder");
	["_LeftSection"] = Instance.new("ScrollingFrame");
	["_UIListLayout1"] = Instance.new("UIListLayout");
	["_Module"] = Instance.new("Frame");
	["_UICorner4"] = Instance.new("UICorner");
	["_Settings"] = Instance.new("Frame");
	["_UIListLayout2"] = Instance.new("UIListLayout");
	["_RightSection"] = Instance.new("ScrollingFrame");
	["_UIListLayout4"] = Instance.new("UIListLayout");
	["_UIScale"] = Instance.new("UIScale");
	["_UIAspectRatioConstraint"] = Instance.new("UIAspectRatioConstraint");
	["_Mobile"] = Instance.new("TextButton");
	["_UICorner10"] = Instance.new("UICorner");
	["_Icon2"] = Instance.new("ImageLabel");
	["_UIAspectRatioConstraint1"] = Instance.new("UIAspectRatioConstraint");
}

local FlowUI = {}
FlowUI.__index = FlowUI

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Stats = game:GetService("Stats")
local Debris = game:GetService("Debris")
local Lighting = game:GetService("Lighting")
local Workspace = game:GetService("Workspace")
local VirtualUser = game:GetService("VirtualUser")
local NetworkClient = game:GetService("NetworkClient")

local Config = {
	Tabs = {},
	CurrentTab = nil,
	Settings = {},
	Keybinds = {},
	Dropdowns = {},
	Sliders = {},
	Toggles = {},
	Checkboxes = {},
	TextBoxes = {},
	ColorPickers = {}
}

local Library = {
	_device = "Unknown",
	_ui_scale = 1,
	_ui_open = true,
	_dragging = false,
	_drag_start = nil,
	_start_pos = nil,
	_minimized = false
}

local ConfigFolder
local PickerGui

local function hexToRgb(hex)
	hex = hex:gsub("#", "")
	local r = tonumber(hex:sub(1, 2), 16) / 255
	local g = tonumber(hex:sub(3, 4), 16) / 255
	local b = tonumber(hex:sub(5, 6), 16) / 255
	return Color3.new(r, g, b)
end

local function rgbToHex(r, g, b)
	return string.format("%02X%02X%02X", math.floor(r * 255), math.floor(g * 255), math.floor(b * 255))
end

local ColorPicker = {}
ColorPicker.__index = ColorPicker

function ColorPicker.new(callback, scale)
	local self = setmetatable({}, ColorPicker)
	
	self.callback = callback or function() end
	self.currentHue = 0
	self.currentSaturation = 1
	self.currentValue = 1
	self.currentAlpha = 1
	self.colorFormat = "Hex"
	self.isDragging = false
	self.isHueDragging = false
	self.isAlphaDragging = false
	self.isDraggingUI = false
	self.scale = scale or 1
	self.dragStart = nil
	self.startPos = nil
	
	self:createUI()
	self:setupEvents()
	self:updateColor()
	
	return self
end

function ColorPicker:createUI()
	self.container = Instance.new("Frame")
	self.container.Name = "ColorPicker"
	self.container.Size = UDim2.new(0, 320 * self.scale, 0, 430 * self.scale)
	self.container.Position = UDim2.new(0.5, -160 * self.scale, 0.5, -215 * self.scale)
	self.container.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
	self.container.BorderSizePixel = 0
	self.container.Parent = PickerGui
	self.container.Visible = false
	
	local containerCorner = Instance.new("UICorner")
	containerCorner.CornerRadius = UDim.new(0, 16 * self.scale)
	containerCorner.Parent = self.container
	
	local shadow = Instance.new("ImageLabel")
	shadow.Name = "Shadow"
	shadow.Size = UDim2.new(1, 20 * self.scale, 1, 20 * self.scale)
	shadow.Position = UDim2.new(0, -10 * self.scale, 0, -10 * self.scale)
	shadow.BackgroundTransparency = 1
	shadow.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
	shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
	shadow.ImageTransparency = 0.8
	shadow.ZIndex = -1
	shadow.Parent = self.container
	
	local topBar = Instance.new("Frame")
	topBar.Name = "TopBar"
	topBar.Size = UDim2.new(1, 0, 0, 30 * self.scale)
	topBar.Position = UDim2.new(0, 0, 0, 0)
	topBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	topBar.BorderSizePixel = 0
	topBar.Parent = self.container
	
	local topCorner = Instance.new("UICorner")
	topCorner.CornerRadius = UDim.new(0, 16 * self.scale)
	topCorner.Parent = topBar
	
	local title = Instance.new("TextLabel")
	title.Name = "Title"
	title.Size = UDim2.new(1, -40 * self.scale, 1, 0)
	title.Position = UDim2.new(0, 10 * self.scale, 0, 0)
	title.BackgroundTransparency = 1
	title.Text = "Color Picker"
	title.TextColor3 = Color3.fromRGB(255, 255, 255)
	title.TextSize = 14 * self.scale
	title.Font = Enum.Font.GothamBold
	title.TextXAlignment = Enum.TextXAlignment.Left
	title.Parent = topBar
	
	local closeBtn = Instance.new("TextButton")
	closeBtn.Name = "Close"
	closeBtn.Size = UDim2.new(0, 24 * self.scale, 0, 24 * self.scale)
	closeBtn.Position = UDim2.new(1, -30 * self.scale, 0.5, -12 * self.scale)
	closeBtn.BackgroundColor3 = Color3.fromRGB(220, 50, 50)
	closeBtn.BorderSizePixel = 0
	closeBtn.Text = "Ã—"
	closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
	closeBtn.TextSize = 18 * self.scale
	closeBtn.Font = Enum.Font.GothamBold
	closeBtn.Parent = topBar
	
	local closeCorner = Instance.new("UICorner")
	closeCorner.CornerRadius = UDim.new(0, 12 * self.scale)
	closeCorner.Parent = closeBtn
	
	closeBtn.MouseButton1Click:Connect(function()
		self.container.Visible = false
	end)
	
	self.colorSpace = Instance.new("Frame")
	self.colorSpace.Name = "ColorSpace"
	self.colorSpace.Size = UDim2.new(1, -32 * self.scale, 0, 200 * self.scale)
	self.colorSpace.Position = UDim2.new(0, 16 * self.scale, 0, 46 * self.scale)
	self.colorSpace.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
	self.colorSpace.BorderSizePixel = 0
	self.colorSpace.Parent = self.container
	
	local colorSpaceCorner = Instance.new("UICorner")
	colorSpaceCorner.CornerRadius = UDim.new(0, 12 * self.scale)
	colorSpaceCorner.Parent = self.colorSpace
	
	self.saturationGradient = Instance.new("Frame")
	self.saturationGradient.Size = UDim2.new(1, 0, 1, 0)
	self.saturationGradient.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	self.saturationGradient.BorderSizePixel = 0
	self.saturationGradient.Parent = self.colorSpace
	
	local satGradientCorner = Instance.new("UICorner")
	satGradientCorner.CornerRadius = UDim.new(0, 12 * self.scale)
	satGradientCorner.Parent = self.saturationGradient
	
	local satGradient = Instance.new("UIGradient")
	satGradient.Transparency = NumberSequence.new{
		NumberSequenceKeypoint.new(0, 0),
		NumberSequenceKeypoint.new(1, 1)
	}
	satGradient.Parent = self.saturationGradient
	
	self.valueGradient = Instance.new("Frame")
	self.valueGradient.Size = UDim2.new(1, 0, 1, 0)
	self.valueGradient.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	self.valueGradient.BorderSizePixel = 0
	self.valueGradient.Parent = self.colorSpace
	
	local valGradientCorner = Instance.new("UICorner")
	valGradientCorner.CornerRadius = UDim.new(0, 12 * self.scale)
	valGradientCorner.Parent = self.valueGradient
	
	local valGradient = Instance.new("UIGradient")
	valGradient.Rotation = 90
	valGradient.Transparency = NumberSequence.new{
		NumberSequenceKeypoint.new(0, 1),
		NumberSequenceKeypoint.new(1, 0)
	}
	valGradient.Parent = self.valueGradient
	
	self.colorPicker = Instance.new("Frame")
	self.colorPicker.Name = "ColorPicker"
	self.colorPicker.Size = UDim2.new(0, 20 * self.scale, 0, 20 * self.scale)
	self.colorPicker.Position = UDim2.new(1, -10 * self.scale, 0, -10 * self.scale)
	self.colorPicker.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	self.colorPicker.BorderSizePixel = 3
	self.colorPicker.BorderColor3 = Color3.fromRGB(255, 255, 255)
	self.colorPicker.Parent = self.colorSpace
	
	local pickerCorner = Instance.new("UICorner")
	pickerCorner.CornerRadius = UDim.new(1, 0)
	pickerCorner.Parent = self.colorPicker
	
	local pickerShadow = Instance.new("Frame")
	pickerShadow.Size = UDim2.new(1, 4 * self.scale, 1, 4 * self.scale)
	pickerShadow.Position = UDim2.new(0, -2 * self.scale, 0, -2 * self.scale)
	pickerShadow.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
	pickerShadow.BackgroundTransparency = 0.3
	pickerShadow.BorderSizePixel = 0
	pickerShadow.ZIndex = -1
	pickerShadow.Parent = self.colorPicker
	
	local shadowCorner = Instance.new("UICorner")
	shadowCorner.CornerRadius = UDim.new(1, 0)
	shadowCorner.Parent = pickerShadow
	
	self.hueSlider = Instance.new("Frame")
	self.hueSlider.Name = "HueSlider"
	self.hueSlider.Size = UDim2.new(1, -32 * self.scale, 0, 20 * self.scale)
	self.hueSlider.Position = UDim2.new(0, 16 * self.scale, 0, 270 * self.scale)
	self.hueSlider.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
	self.hueSlider.BorderSizePixel = 0
	self.hueSlider.Parent = self.container
	
	local hueCorner = Instance.new("UICorner")
	hueCorner.CornerRadius = UDim.new(0, 10 * self.scale)
	hueCorner.Parent = self.hueSlider
	
	local hueGradient = Instance.new("UIGradient")
	hueGradient.Color = ColorSequence.new{
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
		ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 255, 0)),
		ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 255, 0)),
		ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
		ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 0, 255)),
		ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 0, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
	}
	hueGradient.Parent = self.hueSlider
	
	self.hueHandle = Instance.new("Frame")
	self.hueHandle.Name = "HueHandle"
	self.hueHandle.Size = UDim2.new(0, 24 * self.scale, 0, 28 * self.scale)
	self.hueHandle.Position = UDim2.new(0, -12 * self.scale, 0, -4 * self.scale)
	self.hueHandle.BackgroundColor3 = Color3.fromRGB(13, 13, 13)
	self.hueHandle.BorderSizePixel = 2
	self.hueHandle.BorderColor3 = Color3.fromRGB(255, 255, 255)
	self.hueHandle.Parent = self.hueSlider
	
	local hueHandleCorner = Instance.new("UICorner")
	hueHandleCorner.CornerRadius = UDim.new(0, 6 * self.scale)
	hueHandleCorner.Parent = self.hueHandle
	
	self.alphaSlider = Instance.new("Frame")
	self.alphaSlider.Name = "AlphaSlider"
	self.alphaSlider.Size = UDim2.new(1, -32 * self.scale, 0, 20 * self.scale)
	self.alphaSlider.Position = UDim2.new(0, 16 * self.scale, 0, 310 * self.scale)
	self.alphaSlider.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
	self.alphaSlider.BorderSizePixel = 0
	self.alphaSlider.Parent = self.container
	
	local alphaCorner = Instance.new("UICorner")
	alphaCorner.CornerRadius = UDim.new(0, 10 * self.scale)
	alphaCorner.Parent = self.alphaSlider
	
	self.checkerboard = Instance.new("Frame")
	self.checkerboard.Size = UDim2.new(1, 0, 1, 0)
	self.checkerboard.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	self.checkerboard.BorderSizePixel = 0
	self.checkerboard.Parent = self.alphaSlider
	
	local checkerCorner = Instance.new("UICorner")
	checkerCorner.CornerRadius = UDim.new(0, 10 * self.scale)
	checkerCorner.Parent = self.checkerboard
	
	self.alphaGradient = Instance.new("Frame")
	self.alphaGradient.Size = UDim2.new(1, 0, 1, 0)
	self.alphaGradient.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
	self.alphaGradient.BorderSizePixel = 0
	self.alphaGradient.Parent = self.alphaSlider
	
	local alphaGradCorner = Instance.new("UICorner")
	alphaGradCorner.CornerRadius = UDim.new(0, 10 * self.scale)
	alphaGradCorner.Parent = self.alphaGradient
	
	local alphaGrad = Instance.new("UIGradient")
	alphaGrad.Transparency = NumberSequence.new{
		NumberSequenceKeypoint.new(0, 1),
		NumberSequenceKeypoint.new(1, 0)
	}
	alphaGrad.Parent = self.alphaGradient
	
	self.alphaHandle = Instance.new("Frame")
	self.alphaHandle.Name = "AlphaHandle"
	self.alphaHandle.Size = UDim2.new(0, 24 * self.scale, 0, 28 * self.scale)
	self.alphaHandle.Position = UDim2.new(1, -12 * self.scale, 0, -4 * self.scale)
	self.alphaHandle.BackgroundColor3 = Color3.fromRGB(13, 13, 13)
	self.alphaHandle.BorderSizePixel = 2
	self.alphaHandle.BorderColor3 = Color3.fromRGB(255, 255, 255)
	self.alphaHandle.Parent = self.alphaSlider
	
	local alphaHandleCorner = Instance.new("UICorner")
	alphaHandleCorner.CornerRadius = UDim.new(0, 6 * self.scale)
	alphaHandleCorner.Parent = self.alphaHandle
	
	self.infoContainer = Instance.new("Frame")
	self.infoContainer.Name = "InfoContainer"
	self.infoContainer.Size = UDim2.new(1, -32 * self.scale, 0, 60 * self.scale)
	self.infoContainer.Position = UDim2.new(0, 16 * self.scale, 0, 350 * self.scale)
	self.infoContainer.BackgroundTransparency = 1
	self.infoContainer.Parent = self.container
	
	self.formatButton = Instance.new("TextButton")
	self.formatButton.Name = "FormatButton"
	self.formatButton.Size = UDim2.new(0, 80 * self.scale, 0, 40 * self.scale)
	self.formatButton.Position = UDim2.new(0, 0, 0, 0)
	self.formatButton.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
	self.formatButton.BorderSizePixel = 0
	self.formatButton.Text = "Hex â–¼"
	self.formatButton.TextColor3 = Color3.fromRGB(255, 255, 255)
	self.formatButton.TextSize = 16 * self.scale
	self.formatButton.Font = Enum.Font.GothamMedium
	self.formatButton.Parent = self.infoContainer
	
	local formatCorner = Instance.new("UICorner")
	formatCorner.CornerRadius = UDim.new(0, 8 * self.scale)
	formatCorner.Parent = self.formatButton
	
	self.colorValue = Instance.new("TextLabel")
	self.colorValue.Name = "ColorValue"
	self.colorValue.Size = UDim2.new(0, 120 * self.scale, 0, 40 * self.scale)
	self.colorValue.Position = UDim2.new(0, 90 * self.scale, 0, 0)
	self.colorValue.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
	self.colorValue.BorderSizePixel = 0
	self.colorValue.Text = "FF0000"
	self.colorValue.TextColor3 = Color3.fromRGB(255, 255, 255)
	self.colorValue.TextSize = 16 * self.scale
	self.colorValue.Font = Enum.Font.GothamMedium
	self.colorValue.Parent = self.infoContainer
	
	local valueCorner = Instance.new("UICorner")
	valueCorner.CornerRadius = UDim.new(0, 8 * self.scale)
	valueCorner.Parent = self.colorValue
	
	self.alphaValue = Instance.new("TextLabel")
	self.alphaValue.Name = "AlphaValue"
	self.alphaValue.Size = UDim2.new(0, 78 * self.scale, 0, 40 * self.scale)
	self.alphaValue.Position = UDim2.new(0, 220 * self.scale, 0, 0)
	self.alphaValue.BackgroundColor3 = Color3.fromRGB(33, 33, 33)
	self.alphaValue.BorderSizePixel = 0
	self.alphaValue.Text = "100%"
	self.alphaValue.TextColor3 = Color3.fromRGB(255, 255, 255)
	self.alphaValue.TextSize = 16 * self.scale
	self.alphaValue.Font = Enum.Font.GothamMedium
	self.alphaValue.Parent = self.infoContainer
	
	local alphaValueCorner = Instance.new("UICorner")
	alphaValueCorner.CornerRadius = UDim.new(0, 8 * self.scale)
	alphaValueCorner.Parent = self.alphaValue
end

function ColorPicker:setupEvents()
	self.colorSpace.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			self.isDragging = true
			self:updateColorFromPosition(input.Position)
		end
	end)
	
	self.colorSpace.InputChanged:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and self.isDragging then
			self:updateColorFromPosition(input.Position)
		end
	end)
	
	self.hueSlider.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			self.isHueDragging = true
			self:updateHueFromPosition(input.Position)
		end
	end)
	
	self.hueSlider.InputChanged:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and self.isHueDragging then
			self:updateHueFromPosition(input.Position)
		end
	end)
	
	self.alphaSlider.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			self.isAlphaDragging = true
			self:updateAlphaFromPosition(input.Position)
		end
	end)
	
	self.alphaSlider.InputChanged:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) and self.isAlphaDragging then
			self:updateAlphaFromPosition(input.Position)
		end
	end)
	
	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			self.isDragging = false
			self.isHueDragging = false
			self.isAlphaDragging = false
		end
	end)
	
	self.formatButton.MouseButton1Click:Connect(function()
		self:cycleFormat()
	end)
	
	local moveConnection
	local function startDrag(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			self.isDraggingUI = true
			self.dragStart = Vector2.new(input.Position.X, input.Position.Y)
			self.startPos = self.container.AbsolutePosition
			
			moveConnection = UserInputService.InputChanged:Connect(function(inputChange)
				if self.isDraggingUI and (inputChange.UserInputType == Enum.UserInputType.MouseMovement or inputChange.UserInputType == Enum.UserInputType.Touch) then
					local delta = Vector2.new(inputChange.Position.X, inputChange.Position.Y) - self.dragStart
					local new_pos = self.startPos + delta
					local viewport = workspace.CurrentCamera.ViewportSize
					local containerSize = self.container.AbsoluteSize
					
					new_pos = Vector2.new(
						math.clamp(new_pos.X, 0, viewport.X - containerSize.X),
						math.clamp(new_pos.Y, 0, viewport.Y - containerSize.Y)
					)
					
					self.container.Position = UDim2.new(0, new_pos.X, 0, new_pos.Y)
				end
			end)
		end
	end
	
	local function stopDrag(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			self.isDraggingUI = false
			if moveConnection then
				moveConnection:Disconnect()
			end
		end
	end
	
	self.container:FindFirstChild("TopBar").InputBegan:Connect(startDrag)
	
	UserInputService.InputEnded:Connect(stopDrag)
end

function ColorPicker:updateColorFromPosition(position)
	local relativePos = Vector2.new(
		math.clamp((position.X - self.colorSpace.AbsolutePosition.X) / self.colorSpace.AbsoluteSize.X, 0, 1),
		math.clamp((position.Y - self.colorSpace.AbsolutePosition.Y) / self.colorSpace.AbsoluteSize.Y, 0, 1)
	)
	
	self.currentSaturation = relativePos.X
	self.currentValue = 1 - relativePos.Y
	
	local targetPos = UDim2.new(relativePos.X, -10 * self.scale, relativePos.Y, -10 * self.scale)
	TweenService:Create(self.colorPicker, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {Position = targetPos}):Play()
	
	self:updateColor()
end

function ColorPicker:updateHueFromPosition(position)
	local relativeX = math.clamp((position.X - self.hueSlider.AbsolutePosition.X) / self.hueSlider.AbsoluteSize.X, 0, 1)
	self.currentHue = relativeX * 360
	
	local targetPos = UDim2.new(relativeX, -12 * self.scale, 0, -4 * self.scale)
	TweenService:Create(self.hueHandle, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {Position = targetPos}):Play()
	
	self:updateColor()
end

function ColorPicker:updateAlphaFromPosition(position)
	local relativeX = math.clamp((position.X - self.alphaSlider.AbsolutePosition.X) / self.alphaSlider.AbsoluteSize.X, 0, 1)
	self.currentAlpha = relativeX
	
	local targetPos = UDim2.new(relativeX, -12 * self.scale, 0, -4 * self.scale)
	TweenService:Create(self.alphaHandle, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {Position = targetPos}):Play()
	
	self:updateColor()
end

function ColorPicker:hsvToRgb(h, s, v)
	local r, g, b
	local i = math.floor(h / 60) % 6
	local f = h / 60 - i
	local p = v * (1 - s)
	local q = v * (1 - f * s)
	local t = v * (1 - (1 - f) * s)
	
	if i == 0 then
		r, g, b = v, t, p
	elseif i == 1 then
		r, g, b = q, v, p
	elseif i == 2 then
		r, g, b = p, v, t
	elseif i == 3 then
		r, g, b = p, q, v
	elseif i == 4 then
		r, g, b = t, p, v
	elseif i == 5 then
		r, g, b = v, p, q
	end
	
	return r, g, b
end

function ColorPicker:updateColor()
	local r, g, b = self:hsvToRgb(self.currentHue, self.currentSaturation, self.currentValue)
	local color = Color3.new(r, g, b)
	
	self.colorSpace.BackgroundColor3 = Color3.fromHSV(self.currentHue / 360, 1, 1)
	
	self.alphaGradient.BackgroundColor3 = color
	
	self.colorPicker.BorderColor3 = color
	
	if self.colorFormat == "Hex" then
		self.colorValue.Text = rgbToHex(r, g, b)
	elseif self.colorFormat == "RGB" then
		self.colorValue.Text = string.format("%d, %d, %d", 
			math.floor(r * 255), 
			math.floor(g * 255), 
			math.floor(b * 255)
		)
	elseif self.colorFormat == "HSV" then
		self.colorValue.Text = string.format("%dÂ°, %d%%, %d%%", 
			math.floor(self.currentHue), 
			math.floor(self.currentSaturation * 100), 
			math.floor(self.currentValue * 100)
		)
	end
	
	self.alphaValue.Text = math.floor(self.currentAlpha * 100) .. "%"
	
	self.callback(color, self.currentAlpha)
end

function ColorPicker:cycleFormat()
	local formats = {"Hex", "RGB", "HSV"}
	local currentIndex = 1
	
	for i, format in ipairs(formats) do
		if format == self.colorFormat then
			currentIndex = i
			break
		end
	end
	
	currentIndex = currentIndex % #formats + 1
	self.colorFormat = formats[currentIndex]
	self.formatButton.Text = self.colorFormat .. " â–¼"
	
	self:updateColor()
end

function ColorPicker:setColor(color, alpha)
	local r, g, b = color.R, color.G, color.B
	local max = math.max(r, g, b)
	local min = math.min(r, g, b)
	local delta = max - min
	
	local h = 0
	if delta > 0 then
		if max == r then
			h = 60 * (((g - b) / delta) % 6)
		elseif max == g then
			h = 60 * ((b - r) / delta + 2)
		elseif max == b then
			h = 60 * ((r - g) / delta + 4)
		end
	end
	
	local s = max == 0 and 0 or delta / max
	
	local v = max
	
	self.currentHue = h
	self.currentSaturation = s
	self.currentValue = v
	self.currentAlpha = alpha or 1
	
	self.colorPicker.Position = UDim2.new(s, -10 * self.scale, 1 - v, -10 * self.scale)
	self.hueHandle.Position = UDim2.new(h / 360, -12 * self.scale, 0, -4 * self.scale)
	self.alphaHandle.Position = UDim2.new(self.currentAlpha, -12 * self.scale, 0, -4 * self.scale)
	
	self:updateColor()
end

function Library:get_device()
	local device = 'Unknown'
	local viewport = workspace.CurrentCamera.ViewportSize.X

	if not UserInputService.TouchEnabled and UserInputService.KeyboardEnabled and UserInputService.MouseEnabled then
		device = 'PC'
	elseif UserInputService.GamepadEnabled then
		device = 'Console'
	else
		if viewport >= 800 then
			device = 'Tablet'
		else
			device = 'Mobile'
		end
	end

	self._device = device
end

function Library:get_screen_scale()
	local viewport_size_x = workspace.CurrentCamera.ViewportSize.X
	local base = 0
	if self._device == 'PC' then
		base = 1920
	elseif self._device == 'Tablet' then
		base = 1366
	else
		base = 1200
	end
	self._ui_scale = math.max(0.4, viewport_size_x / base)
end

function Library:change_visibility(state)
	self._minimized = not state
	local current_abs_pos = Converted["_Container"].AbsolutePosition
	local current_abs_size = Converted["_Container"].AbsoluteSize
	local current_center = current_abs_pos + (current_abs_size / 2)
	local target_abs_size
	local target_pos_abs
	local tween_info = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
	local scale = self._ui_scale
	if state then
		target_abs_size = Vector2.new(640 * scale, 355 * scale)
		target_pos_abs = current_center - (target_abs_size / 2)
		local target_pos = UDim2.new(0, target_pos_abs.X, 0, target_pos_abs.Y)
		local target_size = UDim2.new(0, 640 * scale, 0, 355 * scale)
		TweenService:Create(Converted["_Container"], tween_info, {
			Size = target_size,
			Position = target_pos
		}):Play()
		TweenService:Create(Converted["_Header"], tween_info, {
			Size = UDim2.new(0, 624 * scale, 0, 24 * scale),
			Position = UDim2.new(0.0125, 0, 0.0225352105, 0)
		}):Play()
		
		for _, tabData in pairs(Config.Tabs) do
			if tabData.LeftSection then tabData.LeftSection.Visible = Config.CurrentTab and tabData.Tab.Name == Config.CurrentTab end
			if tabData.RightSection then tabData.RightSection.Visible = Config.CurrentTab and tabData.Tab.Name == Config.CurrentTab end
		end
		
		Converted["_Tabs"].Visible = true
		Converted["_Sections"].Visible = true
		Converted["_SearchBar"].Visible = true
		Converted["_Client"].Visible = true
		Converted["_Header"].FindFirstChild("Icon").Visible = true
	else
		local small_width = 104.5 * scale
		local small_height = 24 * scale
		target_abs_size = Vector2.new(small_width, small_height)
		target_pos_abs = current_center - (target_abs_size / 2)
		local target_pos = UDim2.new(0, target_pos_abs.X, 0, target_pos_abs.Y)
		local target_size = UDim2.new(0, small_width, 0, small_height)
		TweenService:Create(Converted["_Container"], tween_info, {
			Size = target_size,
			Position = target_pos
		}):Play()
		TweenService:Create(Converted["_Header"], tween_info, {
			Size = UDim2.new(0, small_width, 0, small_height),
			Position = UDim2.new(0, 0, 0, 0)
		}):Play()
		
		for _, tabData in pairs(Config.Tabs) do
			if tabData.LeftSection then tabData.LeftSection.Visible = false end
			if tabData.RightSection then tabData.RightSection.Visible = false end
		end
		
		Converted["_Tabs"].Visible = false
		Converted["_Sections"].Visible = false
		Converted["_SearchBar"].Visible = false
		Converted["_Client"].Visible = false
		Converted["_Header"].FindFirstChild("Icon").Visible = false
	end
end

local function CreateTween(object, info, properties)
	local tween = TweenService:Create(object, info, properties)
	tween:Play()
	return tween
end

local function SaveValue(name, valueType, value)
	local val = ConfigFolder:FindFirstChild(name)
	if not val then
		if valueType == "Bool" then
			val = Instance.new("BoolValue")
		elseif valueType == "Int" then
			val = Instance.new("IntValue")
		elseif valueType == "String" then
			val = Instance.new("StringValue")
		end
		val.Name = name
		val.Parent = ConfigFolder
	end
	if valueType == "Bool" then
		val.Value = value
	elseif valueType == "Int" then
		val.Value = value
	elseif valueType == "String" then
		val.Value = tostring(value)
	end
end

local function LoadValue(name, default, valueType)
	local val = ConfigFolder:FindFirstChild(name)
	if val and val:IsA(valueType .. "Value") then
		if valueType == "Bool" then
			return val.Value
		elseif valueType == "Int" then
			return val.Value
		elseif valueType == "String" then
			return val.Value
		end
	end
	return default
end

local function GetDevice()
	return Library._device == 'Mobile' or Library._device == 'Tablet'
end

function FlowUI.new()
	local self = setmetatable({}, FlowUI)
	
	Library:get_device()
	Library:get_screen_scale()
	
	ConfigFolder = Instance.new("Folder")
	ConfigFolder.Name = "Flow"
	ConfigFolder.Parent = game:GetService("CoreGui")
	
	PickerGui = Instance.new("ScreenGui")
	PickerGui.Name = "ColorPickers"
	PickerGui.ResetOnSpawn = false
	PickerGui.Parent = game:GetService("CoreGui")
	
	self:SetupGUI()
	self:SetupEvents()
	return self
end

function FlowUI:SetupGUI()
	Converted["_Flow"].ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	Converted["_Flow"].Name = "Flow"
	Converted["_Flow"].Parent = game:GetService("CoreGui")
	
	Converted["_Container"].Active = true
	Converted["_Container"].BackgroundColor3 = Color3.fromRGB(13, 13, 13)
	Converted["_Container"].BackgroundTransparency = 0.1
	Converted["_Container"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Container"].BorderSizePixel = 0
	Converted["_Container"].Size = UDim2.new(0, 640 * Library._ui_scale, 0, 355 * Library._ui_scale)
	Converted["_Container"].Name = "Container"
	Converted["_Container"].Parent = Converted["_Flow"]
	
	Converted["_UIScale"].Parent = Converted["_Container"]
	Converted["_UIScale"].Scale = 1
	
	Converted["_Container"].AnchorPoint = Vector2.new(0, 0)
	local vp = workspace.CurrentCamera.ViewportSize
	local abs_size = Vector2.new(640 * Library._ui_scale, 355 * Library._ui_scale)
	local init_x = (vp.X - abs_size.X) / 2
	local init_y = (vp.Y * 0.493500471) - (abs_size.Y / 2)
	Converted["_Container"].Position = UDim2.new(0, init_x, 0, init_y)
	
	workspace.CurrentCamera:GetPropertyChangedSignal('ViewportSize'):Connect(function()
		if Library._dragging then return end
		Library:get_device()
		Library:get_screen_scale()
		local current_vp = workspace.CurrentCamera.ViewportSize
		local current_abs_size = Vector2.new(640 * Library._ui_scale, 355 * Library._ui_scale)
		local target_x = (current_vp.X - current_abs_size.X) / 2
		local target_y = (current_vp.Y * 0.493500471) - (current_abs_size.Y / 2)
		Converted["_Container"].Size = UDim2.new(0, current_abs_size.X, 0, current_abs_size.Y)
		Converted["_Container"].Position = UDim2.new(0, target_x, 0, target_y)
	end)
	
	Converted["_Frame"].AnchorPoint = Vector2.new(0.5, 0.5)
	Converted["_Frame"].BackgroundTransparency = 1
	Converted["_Frame"].Position = UDim2.new(0.5, 0, 0.5, 0)
	Converted["_Frame"].Size = UDim2.new(0.95, 0, 0.95, 0)
	Converted["_Frame"].Parent = Converted["_Container"]
	
	Converted["_UICorner"].CornerRadius = UDim.new(0, 10 * Library._ui_scale)
	Converted["_UICorner"].Parent = Converted["_Container"]
	
	Converted["_Header"].BackgroundColor3 = Color3.fromRGB(27, 27, 27)
	Converted["_Header"].BackgroundTransparency = 0.5
	Converted["_Header"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Header"].BorderSizePixel = 0
	Converted["_Header"].Position = UDim2.new(0.0125, 0, 0.0225352105, 0)
	Converted["_Header"].Size = UDim2.new(0, 624 * Library._ui_scale, 0, 24 * Library._ui_scale)
	Converted["_Header"].Name = "Header"
	Converted["_Header"].Parent = Converted["_Container"]
	
	Converted["_UICorner1"].CornerRadius = UDim.new(0, 5 * Library._ui_scale)
	Converted["_UICorner1"].Parent = Converted["_Header"]
	
	local Icon = Instance.new("ImageLabel")
	Icon.Name = "Icon"
	Icon.Size = UDim2.new(0, 20 * Library._ui_scale, 0, 20 * Library._ui_scale)
	Icon.Position = UDim2.new(0.02, 0, 0.5, 0)
	Icon.AnchorPoint = Vector2.new(0, 0.5)
	Icon.BackgroundTransparency = 1
	Icon.Visible = true
	Icon.Parent = Converted["_Header"]
	
	local gifFrames = {
		'rbxassetid://102347466457412',
		'rbxassetid://108245437933275',
		'rbxassetid://75740598430543',
		'rbxassetid://79416194850484',
		'rbxassetid://105289533051099',
		'rbxassetid://118993525169416',
		'rbxassetid://117023058747198',
		'rbxassetid://120000264220049',
		'rbxassetid://127406027575419',
	}
	
	task.spawn(function()
		local frame = 1
		while Icon and Icon.Parent do
			Icon.Image = gifFrames[frame]
			frame = frame + 1
			if frame > #gifFrames then frame = 1 end
			task.wait(0.1)
		end
	end)
	
	Converted["_Client"].Font = Enum.Font.GothamBold
	Converted["_Client"].Text = "Anerial"
	Converted["_Client"].TextColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_Client"].TextScaled = true
	Converted["_Client"].TextSize = 14 * Library._ui_scale
	Converted["_Client"].TextWrapped = true
	Converted["_Client"].TextXAlignment = Enum.TextXAlignment.Left
	Converted["_Client"].AnchorPoint = Vector2.new(0, 0.5)
	Converted["_Client"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_Client"].BackgroundTransparency = 1
	Converted["_Client"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Client"].BorderSizePixel = 0
	Converted["_Client"].Position = UDim2.new(0.08, 0, 0.5, 0)
	Converted["_Client"].Size = UDim2.new(0, 78 * Library._ui_scale, 0, 12 * Library._ui_scale)
	Converted["_Client"].Name = "Client"
	Converted["_Client"].Parent = Converted["_Header"]
	
	Converted["_UITextSizeConstraint"].MaxTextSize = 12 * Library._ui_scale
	Converted["_UITextSizeConstraint"].MinTextSize = 12 * Library._ui_scale
	Converted["_UITextSizeConstraint"].Parent = Converted["_Client"]
	
	self:SetupSearchBar()
	
	self:SetupTabs()
	
	self:SetupSections()
	
	self:SetupMobileButton()
end

function FlowUI:SetupSearchBar()
	Converted["_SearchBar"].AnchorPoint = Vector2.new(1, 0.5)
	Converted["_SearchBar"].BackgroundColor3 = Color3.fromRGB(33, 33, 33)
	Converted["_SearchBar"].BackgroundTransparency = 0.5
	Converted["_SearchBar"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_SearchBar"].BorderSizePixel = 0
	Converted["_SearchBar"].Position = UDim2.new(0.995, 0, 0.5, 0)
	Converted["_SearchBar"].Size = UDim2.new(0, 64 * Library._ui_scale, 0, 17 * Library._ui_scale)
	Converted["_SearchBar"].Name = "SearchBar"
	Converted["_SearchBar"].Parent = Converted["_Header"]
	
	Converted["_UICorner2"].CornerRadius = UDim.new(0, 4 * Library._ui_scale)
	Converted["_UICorner2"].Parent = Converted["_SearchBar"]
	
	local searchIcon = Instance.new("ImageLabel")
	searchIcon.Name = "SearchIcon"
	searchIcon.Size = UDim2.new(0, 12 * Library._ui_scale, 0, 12 * Library._ui_scale)
	searchIcon.Position = UDim2.new(0, 4 * Library._ui_scale, 0.5, 0)
	searchIcon.AnchorPoint = Vector2.new(0, 0.5)
	searchIcon.BackgroundTransparency = 1
	searchIcon.Image = "rbxassetid://6031097228"
	searchIcon.ImageColor3 = Color3.fromRGB(255, 255, 255)
	searchIcon.ImageTransparency = 0.5
	searchIcon.Parent = Converted["_SearchBar"]
	
	Converted["_Input"].ClearTextOnFocus = false
	Converted["_Input"].Font = Enum.Font.Gotham
	Converted["_Input"].PlaceholderColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_Input"].PlaceholderText = "Search"
	Converted["_Input"].Text = ""
	Converted["_Input"].TextColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_Input"].TextSize = 10 * Library._ui_scale
	Converted["_Input"].TextTransparency = 0.5
	Converted["_Input"].TextWrapped = true
	Converted["_Input"].TextXAlignment = Enum.TextXAlignment.Left
	Converted["_Input"].AnchorPoint = Vector2.new(0, 0.5)
	Converted["_Input"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_Input"].BackgroundTransparency = 1
	Converted["_Input"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Input"].BorderSizePixel = 0
	Converted["_Input"].Position = UDim2.new(0, 20 * Library._ui_scale, 0.5, 0)
	Converted["_Input"].Size = UDim2.new(0, 39 * Library._ui_scale, 0, 14 * Library._ui_scale)
	Converted["_Input"].Name = "Input"
	Converted["_Input"].Parent = Converted["_SearchBar"]
	
	Converted["_UITextSizeConstraint1"].MaxTextSize = 10 * Library._ui_scale
	Converted["_UITextSizeConstraint1"].MinTextSize = 10 * Library._ui_scale
	Converted["_UITextSizeConstraint1"].Parent = Converted["_Input"]
	
	Converted["_UIPadding"].PaddingLeft = UDim.new(0, 9 * Library._ui_scale)
	Converted["_UIPadding"].Parent = Converted["_SearchBar"]
end

function FlowUI:SetupTabs()
	Converted["_Tabs"].AutomaticCanvasSize = Enum.AutomaticSize.X
	Converted["_Tabs"].CanvasSize = UDim2.new(0, 0, 0.5, 0)
	Converted["_Tabs"].ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Tabs"].ScrollBarImageTransparency = 1
	Converted["_Tabs"].ScrollBarThickness = 0
	Converted["_Tabs"].Active = true
	Converted["_Tabs"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_Tabs"].BackgroundTransparency = 1
	Converted["_Tabs"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_Tabs"].BorderSizePixel = 0
	Converted["_Tabs"].Position = UDim2.new(0.0125, 0, 0.109859154, 0)
	Converted["_Tabs"].Size = UDim2.new(0, 138 * Library._ui_scale, 0, 308 * Library._ui_scale)
	Converted["_Tabs"].Name = "Tabs"
	Converted["_Tabs"].Parent = Converted["_Container"]
	
	Converted["_UIListLayout"].Padding = UDim.new(0, 6 * Library._ui_scale)
	Converted["_UIListLayout"].SortOrder = Enum.SortOrder.LayoutOrder
	Converted["_UIListLayout"].Parent = Converted["_Tabs"]
end

function FlowUI:SetupSections()
	Converted["_Sections"].Name = "Sections"
	Converted["_Sections"].Parent = Converted["_Container"]
	
	Converted["_LeftSection"].AutomaticCanvasSize = Enum.AutomaticSize.XY
	Converted["_LeftSection"].CanvasSize = UDim2.new(0, 0, 0, 0)
	Converted["_LeftSection"].ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_LeftSection"].ScrollBarImageTransparency = 1
	Converted["_LeftSection"].ScrollBarThickness = 6
	Converted["_LeftSection"].Active = true
	Converted["_LeftSection"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_LeftSection"].BackgroundTransparency = 1
	Converted["_LeftSection"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_LeftSection"].BorderSizePixel = 0
	Converted["_LeftSection"].Position = UDim2.new(0.24, 0, 0.11, 0)
	Converted["_LeftSection"].Size = UDim2.new(0, 237 * Library._ui_scale, 0, 306 * Library._ui_scale)
	Converted["_LeftSection"].Name = "LeftSection"
	Converted["_LeftSection"].Parent = Converted["_Sections"]
	
	Converted["_UIListLayout1"].Padding = UDim.new(0, 6 * Library._ui_scale)
	Converted["_UIListLayout1"].Parent = Converted["_LeftSection"]
	
	Converted["_RightSection"].AutomaticCanvasSize = Enum.AutomaticSize.XY
	Converted["_RightSection"].CanvasSize = UDim2.new(0, 0, 0, 0)
	Converted["_RightSection"].ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_RightSection"].ScrollBarImageTransparency = 1
	Converted["_RightSection"].ScrollBarThickness = 6
	Converted["_RightSection"].Active = true
	Converted["_RightSection"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	Converted["_RightSection"].BackgroundTransparency = 1
	Converted["_RightSection"].BorderColor3 = Color3.fromRGB(0, 0, 0)
	Converted["_RightSection"].BorderSizePixel = 0
	Converted["_RightSection"].Position = UDim2.new(0.62, 0, 0.11, 0)
	Converted["_RightSection"].Size = UDim2.new(0, 237 * Library._ui_scale, 0, 306 * Library._ui_scale)
	Converted["_RightSection"].Name = "RightSection"
	Converted["_RightSection"].Parent = Converted["_Sections"]
	
	Converted["_UIListLayout4"].Padding = UDim.new(0, 6 * Library._ui_scale)
	Converted["_UIListLayout4"].SortOrder = Enum.SortOrder.LayoutOrder
	Converted["_UIListLayout4"].Parent = Converted["_RightSection"]
end

function FlowUI:SetupMobileButton()
	if GetDevice() then
		Converted["_Mobile"].Font = Enum.Font.SourceSans
		Converted["_Mobile"].Text = ""
		Converted["_Mobile"].TextColor3 = Color3.fromRGB(0, 0, 0)
		Converted["_Mobile"].TextSize = 14 * Library._ui_scale
		Converted["_Mobile"].AutoButtonColor = false
		Converted["_Mobile"].AnchorPoint = Vector2.new(0.5, 0)
		Converted["_Mobile"].BackgroundColor3 = Color3.fromRGB(13, 13, 13)
		Converted["_Mobile"].BackgroundTransparency = 0.1
		Converted["_Mobile"].BorderColor3 = Color3.fromRGB(0, 0, 0)
		Converted["_Mobile"].BorderSizePixel = 0
		Converted["_Mobile"].Position = UDim2.new(0.5, 0, 0.902557433, 0)
		Converted["_Mobile"].Size = UDim2.new(0.0360920988, 0, 0.0440097786, 0)
		Converted["_Mobile"].Name = "Mobile"
		Converted["_Mobile"].Parent = Converted["_Flow"]
		
		Converted["_UICorner10"].CornerRadius = UDim.new(0, 10 * Library._ui_scale)
		Converted["_UICorner10"].Parent = Converted["_Mobile"]
		
		Converted["_UIAspectRatioConstraint1"].AspectRatio = 1.6111111640930176
		Converted["_UIAspectRatioConstraint1"].Parent = Converted["_Mobile"]
	end
end

function FlowUI:SetupEvents()
	if Converted["_Mobile"] then
		Converted["_Mobile"].MouseButton1Click:Connect(function()
			Library._ui_open = not Library._ui_open
			Library:change_visibility(Library._ui_open)
		end)
	end
	
	Converted["_Input"].Changed:Connect(function(property)
		if property == "Text" then
			self:FilterContent(Converted["_Input"].Text)
		end
	end)
	
	local moveConnection
	local function startDrag(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
			Library._dragging = true
			Library._drag_start = Vector2.new(input.Position.X, input.Position.Y)
			Library._start_pos = Converted["_Container"].AbsolutePosition
			
			moveConnection = UserInputService.InputChanged:Connect(function(inputChange)
				if Library._dragging and (inputChange.UserInputType == Enum.UserInputType.MouseMovement or inputChange.UserInputType == Enum.UserInputType.Touch) then
					local delta = Vector2.new(inputChange.Position.X, inputChange.Position.Y) - Library._drag_start
					local new_pos = Library._start_pos + delta
					local viewport = workspace.CurrentCamera.ViewportSize
					local containerSize = Converted["_Container"].AbsoluteSize
					
					new_pos = Vector2.new(
						math.clamp(new_pos.X, 0, viewport.X - containerSize.X),
						math.clamp(new_pos.Y, 0, viewport.Y - containerSize.Y)
					)
					
					Converted["_Container"].Position = UDim2.new(0, new_pos.X, 0, new_pos.Y)
				end
			end)
		end
	end
	
	local function stopDrag(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
			Library._dragging = false
			if moveConnection then
				moveConnection:Disconnect()
			end
		end
	end
	
	Converted["_Header"].InputBegan:Connect(startDrag)
	
	UserInputService.InputEnded:Connect(stopDrag)
end

function FlowUI:CreateTab(name, icon)
	local tab = Converted["_Tab"]:Clone()
	tab.Name = name
	tab.Parent = Converted["_Tabs"]
	
	tab.Font = Enum.Font.SourceSans
	tab.Text = ""
	tab.TextColor3 = Color3.fromRGB(0, 0, 0)
	tab.TextSize = 14 * Library._ui_scale
	tab.AutoButtonColor = false
	tab.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
	tab.BackgroundTransparency = 0.7
	tab.BorderColor3 = Color3.fromRGB(0, 0, 0)
	tab.BorderSizePixel = 0
	tab.Size = UDim2.new(0, 138 * Library._ui_scale, 0, 27 * Library._ui_scale)
	
	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 5 * Library._ui_scale)
	corner.Parent = tab
	
	local iconLabel = tab:FindFirstChild("Icon") or Instance.new("ImageLabel")
	iconLabel.Name = "Icon"
	iconLabel.Image = icon or "rbxassetid://10709810463"
	iconLabel.AnchorPoint = Vector2.new(0, 0.5)
	iconLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	iconLabel.BackgroundTransparency = 1
	iconLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	iconLabel.BorderSizePixel = 0
	iconLabel.Position = UDim2.new(0.1, 0, 0.5, 0)
	iconLabel.Size = UDim2.new(0, 12 * Library._ui_scale, 0, 12 * Library._ui_scale)
	iconLabel.Parent = tab
	
	local titleLabel = tab:FindFirstChild("Title") or Instance.new("TextLabel")
	titleLabel.Name = "Title"
	titleLabel.Font = Enum.Font.Gotham
	titleLabel.Text = name
	titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.TextScaled = true
	titleLabel.TextSize = 14 * Library._ui_scale
	titleLabel.TextWrapped = true
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.AnchorPoint = Vector2.new(0, 0.5)
	titleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.BackgroundTransparency = 1
	titleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	titleLabel.BorderSizePixel = 0
	titleLabel.Position = UDim2.new(0.225, 0, 0.5, 0)
	titleLabel.Size = UDim2.new(0, 75 * Library._ui_scale, 0, 12 * Library._ui_scale)
	titleLabel.Parent = tab
	
	local textConstraint = Instance.new("UITextSizeConstraint")
	textConstraint.MaxTextSize = 12 * Library._ui_scale
	textConstraint.MinTextSize = 12 * Library._ui_scale
	textConstraint.Parent = titleLabel
	
	tab.MouseButton1Click:Connect(function()
		self:SelectTab(name)
	end)
	
	local leftSection = Instance.new("ScrollingFrame")
	leftSection.Name = name .. "_Left"
	leftSection.BackgroundTransparency = 1
	leftSection.Size = UDim2.new(1, 0, 1, 0)
	leftSection.Visible = false
	leftSection.AutomaticCanvasSize = Enum.AutomaticSize.Y
	leftSection.ScrollBarThickness = 0
	leftSection.ScrollBarImageTransparency = 1
	leftSection.Parent = Converted["_LeftSection"]
	
	local leftLayout = Instance.new("UIListLayout")
	leftLayout.Padding = UDim.new(0, 6 * Library._ui_scale)
	leftLayout.Parent = leftSection
	
	local rightSection = Instance.new("ScrollingFrame")
	rightSection.Name = name .. "_Right"
	rightSection.BackgroundTransparency = 1
	rightSection.Size = UDim2.new(1, 0, 1, 0)
	rightSection.Visible = false
	rightSection.AutomaticCanvasSize = Enum.AutomaticSize.Y
	rightSection.ScrollBarThickness = 0
	rightSection.ScrollBarImageTransparency = 1
	rightSection.Parent = Converted["_RightSection"]
	
	local rightLayout = Instance.new("UIListLayout")
	rightLayout.Padding = UDim.new(0, 6 * Library._ui_scale)
	rightLayout.Parent = rightSection
	
	local modules = {}
	
	Config.Tabs[name] = {
		Tab = tab,
		LeftSection = leftSection,
		RightSection = rightSection,
		Modules = modules
	}
	
	if not Config.CurrentTab then
		self:SelectTab(name)
	end
	
	return {
		Tab = tab,
		LeftSection = leftSection,
		RightSection = rightSection,
		Modules = modules
	}
end

function FlowUI:SelectTab(name)
	for tabName, tabData in pairs(Config.Tabs) do
		tabData.Tab.BackgroundTransparency = 0.7
		tabData.LeftSection.Visible = false
		tabData.RightSection.Visible = false
	end
	
	if Config.Tabs[name] then
		Config.Tabs[name].Tab.BackgroundTransparency = 0.2
		Config.Tabs[name].LeftSection.Visible = true
		Config.Tabs[name].RightSection.Visible = true
		Config.CurrentTab = name
	end
end

function FlowUI:FilterContent(searchText)
	local lowerSearch = string.lower(searchText)
	if lowerSearch == "" then
		for _, tabData in pairs(Config.Tabs) do
			tabData.Tab.Visible = true
			for _, module in pairs(tabData.Modules) do
				module.Module.Visible = true
			end
		end
		return
	end
	
	for _, tabData in pairs(Config.Tabs) do
		tabData.Tab.Visible = false
		for _, module in pairs(tabData.Modules) do
			module.Module.Visible = false
		end
	end
	
	for tabName, tabData in pairs(Config.Tabs) do
		local tabMatch = string.find(string.lower(tabName), lowerSearch) ~= nil
		local hasMatchingModule = false
		
		for _, module in pairs(tabData.Modules) do
			local moduleMatch = string.find(string.lower(module.Module.Name), lowerSearch) ~= nil
			module.Module.Visible = tabMatch or moduleMatch
			if moduleMatch then
				hasMatchingModule = true
			end
		end
		
		tabData.Tab.Visible = tabMatch or hasMatchingModule
	end
end

function FlowUI:CreateModule(tabName, moduleName, side)
	side = side or "Left"
	local tabData = Config.Tabs[tabName]
	if not tabData then return end
	local section = tabData[side .. "Section"]
	if not section then return end
	
	local module = Instance.new("Frame")
	module.Name = moduleName
	module.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
	module.BackgroundTransparency = 0.5
	module.BorderColor3 = Color3.fromRGB(0, 0, 0)
	module.BorderSizePixel = 0
	module.ClipsDescendants = true
	module.Size = UDim2.new(0, 237 * Library._ui_scale, 0, 50 * Library._ui_scale)
	module.Parent = section
	
	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 5 * Library._ui_scale)
	corner.Parent = module
	
	local header = Instance.new("ImageButton")
	header.Name = "Header"
	header.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	header.BackgroundTransparency = 0.5
	header.BorderColor3 = Color3.fromRGB(0, 0, 0)
	header.BorderSizePixel = 0
	header.Size = UDim2.new(0, 237 * Library._ui_scale, 0, 28 * Library._ui_scale)
	header.Parent = module
	
	local headerCorner = Instance.new("UICorner")
	headerCorner.CornerRadius = UDim.new(0, 5 * Library._ui_scale)
	headerCorner.Parent = header
	
	local title = Instance.new("TextLabel")
	title.Name = "Title"
	title.Font = Enum.Font.GothamBold
	title.Text = moduleName
	title.TextColor3 = Color3.fromRGB(255, 255, 255)
	title.TextScaled = true
	title.TextSize = 14 * Library._ui_scale
	title.TextTransparency = 0.5
	title.TextWrapped = true
	title.TextXAlignment = Enum.TextXAlignment.Left
	title.AnchorPoint = Vector2.new(0, 0.5)
	title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	title.BackgroundTransparency = 1
	title.BorderColor3 = Color3.fromRGB(0, 0, 0)
	title.BorderSizePixel = 0
	title.Position = UDim2.new(0.05, 0, 0.5, 0)
	title.Size = UDim2.new(0, 156 * Library._ui_scale, 0, 12 * Library._ui_scale)
	title.Parent = header
	
	local titleConstraint = Instance.new("UITextSizeConstraint")
	titleConstraint.MaxTextSize = 12 * Library._ui_scale
	titleConstraint.MinTextSize = 12 * Library._ui_scale
	titleConstraint.Parent = title
	
	local arrow = Instance.new("ImageLabel")
	arrow.Name = "Arrow"
	arrow.Image = "rbxassetid://136776761805636"
	arrow.ImageTransparency = 0.5
	arrow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	arrow.BackgroundTransparency = 1
	arrow.BorderColor3 = Color3.fromRGB(0, 0, 0)
	arrow.BorderSizePixel = 0
	arrow.Position = UDim2.new(0.9, 0, 0.286, 0)
	arrow.Rotation = -90
	arrow.Size = UDim2.new(0, 11 * Library._ui_scale, 0, 11 * Library._ui_scale)
	arrow.Parent = header
	
	local settings = Instance.new("Frame")
	settings.Name = "Settings"
	settings.AnchorPoint = Vector2.new(0, 1)
	settings.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
	settings.BackgroundTransparency = 1
	settings.BorderColor3 = Color3.fromRGB(0, 0, 0)
	settings.BorderSizePixel = 0
	settings.ClipsDescendants = true
	settings.Position = UDim2.new(0, 0, 1, 0)
	settings.Size = UDim2.new(0, 237 * Library._ui_scale, 0, 0)
	settings.Parent = module
	
	local settingsLayout = Instance.new("UIListLayout")
	settingsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	settingsLayout.SortOrder = Enum.SortOrder.LayoutOrder
	settingsLayout.VerticalAlignment = Enum.VerticalAlignment.Center
	settingsLayout.Padding = UDim.new(0, 6 * Library._ui_scale)
	settingsLayout.Parent = settings
	
	local expanded = false
	local moduleData = {
		Module = module,
		Settings = settings,
		Header = header,
		Layout = settingsLayout,
		Expanded = expanded
	}
	
	local function updateModuleSize()
		if expanded then
			local contentHeight = settingsLayout.AbsoluteContentSize.Y
			local targetSize = UDim2.new(0, 237 * Library._ui_scale, 0, 28 * Library._ui_scale + contentHeight + 10 * Library._ui_scale)
			local targetSettingsSize = UDim2.new(0, 237 * Library._ui_scale, 0, contentHeight + 10 * Library._ui_scale)
			
			CreateTween(module, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = targetSize})
			CreateTween(settings, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = targetSettingsSize})
		else
			CreateTween(module, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 237 * Library._ui_scale, 0, 28 * Library._ui_scale)})
			CreateTween(settings, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 237 * Library._ui_scale, 0, 0)})
		end
	end
	
	moduleData.UpdateSize = updateModuleSize
	
	header.MouseButton1Click:Connect(function()
		expanded = not expanded
		moduleData.Expanded = expanded
		local targetRotation = expanded and 0 or -90
		
		updateModuleSize()
		CreateTween(arrow, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Rotation = targetRotation})
	end)
	
	settingsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
		if expanded then
			updateModuleSize()
		end
	end)
	
	table.insert(tabData.Modules, moduleData)
	
	return moduleData
end

function FlowUI:CreateDropdown(parent, title, options, callback, moduleData)
	local default = LoadValue(title, options[1] or "None", "String")
	local dropdown = Instance.new("TextButton")
	dropdown.Name = "Dropdown"
	dropdown.Font = Enum.Font.SourceSans
	dropdown.Text = ""
	dropdown.TextColor3 = Color3.fromRGB(0, 0, 0)
	dropdown.TextSize = 14 * Library._ui_scale
	dropdown.AutoButtonColor = false
	dropdown.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	dropdown.BackgroundTransparency = 1
	dropdown.BorderColor3 = Color3.fromRGB(0, 0, 0)
	dropdown.BorderSizePixel = 0
	dropdown.Size = UDim2.new(0, 216 * Library._ui_scale, 0, 50 * Library._ui_scale)
	dropdown.Parent = parent
	
	local padding = Instance.new("UIPadding")
	padding.PaddingTop = UDim.new(0, 3 * Library._ui_scale)
	padding.Parent = dropdown
	
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = "Title"
	titleLabel.Font = Enum.Font.GothamMedium
	titleLabel.Text = title
	titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.TextScaled = true
	titleLabel.TextSize = 14 * Library._ui_scale
	titleLabel.TextTransparency = 0.5
	titleLabel.TextWrapped = true
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.BackgroundTransparency = 1
	titleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	titleLabel.BorderSizePixel = 0
	titleLabel.Size = UDim2.new(0, 215 * Library._ui_scale, 0, 12 * Library._ui_scale)
	titleLabel.Parent = dropdown
	
	local titleConstraint = Instance.new("UITextSizeConstraint")
	titleConstraint.MaxTextSize = 12 * Library._ui_scale
	titleConstraint.MinTextSize = 12 * Library._ui_scale
	titleConstraint.Parent = titleLabel
	
	local box = Instance.new("TextButton")
	box.Name = "Box"
	box.AnchorPoint = Vector2.new(0.5, 0)
	box.BackgroundColor3 = Color3.fromRGB(48, 48, 48)
	box.BackgroundTransparency = 0.5
	box.BorderColor3 = Color3.fromRGB(0, 0, 0)
	box.BorderSizePixel = 0
	box.Position = UDim2.new(0.5, 0, 1.3, 0)
	box.Size = UDim2.new(0, 218 * Library._ui_scale, 0, 18 * Library._ui_scale)
	box.Text = ""
	box.Parent = titleLabel
	
	local boxCorner = Instance.new("UICorner")
	boxCorner.CornerRadius = UDim.new(0, 5 * Library._ui_scale)
	boxCorner.Parent = box
	
	local selectedOption = Instance.new("TextLabel")
	selectedOption.Name = "Option"
	selectedOption.Font = Enum.Font.GothamMedium
	selectedOption.Text = default
	selectedOption.TextColor3 = Color3.fromRGB(255, 255, 255)
	selectedOption.TextSize = 12 * Library._ui_scale
	selectedOption.TextTransparency = 0.5
	selectedOption.TextXAlignment = Enum.TextXAlignment.Left
	selectedOption.AnchorPoint = Vector2.new(0.5, 0)
	selectedOption.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	selectedOption.BackgroundTransparency = 1
	selectedOption.BorderColor3 = Color3.fromRGB(0, 0, 0)
	selectedOption.BorderSizePixel = 0
	selectedOption.Position = UDim2.new(0.5, 0, 0.1, 0)
	selectedOption.Size = UDim2.new(0, 194 * Library._ui_scale, 0, 12 * Library._ui_scale)
	selectedOption.Parent = box
	
	local selectedConstraint = Instance.new("UITextSizeConstraint")
	selectedConstraint.MaxTextSize = 12 * Library._ui_scale
	selectedConstraint.MinTextSize = 12 * Library._ui_scale
	selectedConstraint.Parent = selectedOption
	
	local arrow = Instance.new("ImageLabel")
	arrow.Name = "Arrow"
	arrow.Image = "rbxassetid://136776761805636"
	arrow.ImageTransparency = 0.5
	arrow.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	arrow.BackgroundTransparency = 1
	arrow.BorderColor3 = Color3.fromRGB(0, 0, 0)
	arrow.BorderSizePixel = 0
	arrow.Position = UDim2.new(0.93, 0, 0.25, 0)
	arrow.Rotation = -90
	arrow.Size = UDim2.new(0, 10 * Library._ui_scale, 0, 10 * Library._ui_scale)
	arrow.Parent = box
	
	local optionsContainer = Instance.new("Frame")
	optionsContainer.Name = "Options"
	optionsContainer.AnchorPoint = Vector2.new(0.5, 0)
	optionsContainer.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	optionsContainer.BackgroundTransparency = 0.5
	optionsContainer.BorderColor3 = Color3.fromRGB(0, 0, 0)
	optionsContainer.BorderSizePixel = 0
	optionsContainer.ClipsDescendants = true
	optionsContainer.Position = UDim2.new(0.5, 0, 1.1, 0)
	optionsContainer.Size = UDim2.new(0, 218 * Library._ui_scale, 0, 0)
	optionsContainer.Visible = false
	optionsContainer.Parent = box
	optionsContainer.ZIndex = 10
	
	local optionsCorner = Instance.new("UICorner")
	optionsCorner.CornerRadius = UDim.new(0, 5 * Library._ui_scale)
	optionsCorner.Parent = optionsContainer
	
	local optionsList = Instance.new("ScrollingFrame")
	optionsList.Name = "List"
	optionsList.AutomaticCanvasSize = Enum.AutomaticSize.Y
	optionsList.CanvasSize = UDim2.new(0, 0, 0, 0)
	optionsList.ScrollBarImageColor3 = Color3.fromRGB(0, 0, 0)
	optionsList.ScrollBarImageTransparency = 1
	optionsList.ScrollBarThickness = 0
	optionsList.Active = true
	optionsList.AnchorPoint = Vector2.new(0.5, 0)
	optionsList.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	optionsList.BackgroundTransparency = 1
	optionsList.BorderColor3 = Color3.fromRGB(0, 0, 0)
	optionsList.BorderSizePixel = 0
	optionsList.Position = UDim2.new(0.5, 0, 0, 0)
	optionsList.Size = UDim2.new(0, 218 * Library._ui_scale, 0, 85 * Library._ui_scale)
	optionsList.Parent = optionsContainer
	
	local optionsLayout = Instance.new("UIListLayout")
	optionsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	optionsLayout.Padding = UDim.new(0, 2 * Library._ui_scale)
	optionsLayout.Parent = optionsList
	
	for i, option in ipairs(options) do
		local optionButton = Instance.new("TextButton")
		optionButton.Name = "Option"
		optionButton.Font = Enum.Font.GothamMedium
		optionButton.Text = option
		optionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
		optionButton.TextSize = 12 * Library._ui_scale
		optionButton.TextTransparency = 0.5
		optionButton.TextXAlignment = Enum.TextXAlignment.Left
		optionButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		optionButton.BackgroundTransparency = 1
		optionButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
		optionButton.BorderSizePixel = 0
		optionButton.Size = UDim2.new(0, 205 * Library._ui_scale, 0, 17 * Library._ui_scale)
		optionButton.ZIndex = 15
		optionButton.Parent = optionsList
		
		local optionConstraint = Instance.new("UITextSizeConstraint")
		optionConstraint.MaxTextSize = 12 * Library._ui_scale
		optionConstraint.MinTextSize = 12 * Library._ui_scale
		optionConstraint.Parent = optionButton
		
		optionButton.MouseButton1Click:Connect(function()
			selectedOption.Text = option
			SaveValue(title, "String", option)
			optionsContainer.Visible = false
			
			TweenService:Create(optionsContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				Size = UDim2.new(0, 218 * Library._ui_scale, 0, 0)
			}):Play()
			TweenService:Create(arrow, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				Rotation = -90
			}):Play()
			
			if moduleData and moduleData.UpdateSize then
				task.wait(0.1)
				moduleData.UpdateSize()
			end
			
			Config.Dropdowns[title] = {
				Dropdown = dropdown,
				Value = option,
				Callback = callback
			}
			
			if callback then
				callback(option, i)
			end
		end)
		
		optionButton.MouseEnter:Connect(function()
			TweenService:Create(optionButton, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				BackgroundTransparency = 0.8
			}):Play()
		end)
		
		optionButton.MouseLeave:Connect(function()
			TweenService:Create(optionButton, TweenInfo.new(0.2, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				BackgroundTransparency = 1
			}):Play()
		end)
	end
	
	local isOpen = false
	box.MouseButton1Click:Connect(function()
		isOpen = not isOpen
		optionsContainer.Visible = isOpen
		local targetSize = isOpen and UDim2.new(0, 218 * Library._ui_scale, 0, math.min(85 * Library._ui_scale, #options * 17 * Library._ui_scale)) or UDim2.new(0, 218 * Library._ui_scale, 0, 0)
		local targetRotation = isOpen and 0 or -90
		
		dropdown.Size = isOpen and UDim2.new(0, 216 * Library._ui_scale, 0, 50 * Library._ui_scale + math.min(85 * Library._ui_scale, #options * 17 * Library._ui_scale)) or UDim2.new(0, 216 * Library._ui_scale, 0, 50 * Library._ui_scale)
		
		TweenService:Create(optionsContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
			Size = targetSize
		}):Play()
		TweenService:Create(arrow, TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
			Rotation = targetRotation
		}):Play()
		
		if moduleData and moduleData.UpdateSize then
			task.wait(0.1)
			moduleData.UpdateSize()
		end
	end)
	
	SaveValue(title, "String", default)
	
	Config.Dropdowns[title] = {
		Dropdown = dropdown,
		Value = default,
		Callback = callback
	}
	
	return dropdown
end

function FlowUI:CreateSlider(parent, title, min, max, default, callback)
	local defaultVal = LoadValue(title, default, "Int")
	local slider = Instance.new("TextButton")
	slider.Name = "Slider"
	slider.Font = Enum.Font.SourceSans
	slider.Text = ""
	slider.TextColor3 = Color3.fromRGB(0, 0, 0)
	slider.TextSize = 14 * Library._ui_scale
	slider.AutoButtonColor = false
	slider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	slider.BackgroundTransparency = 1
	slider.BorderColor3 = Color3.fromRGB(0, 0, 0)
	slider.BorderSizePixel = 0
	slider.Size = UDim2.new(0, 216 * Library._ui_scale, 0, 27 * Library._ui_scale)
	slider.Parent = parent
	
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = "Title"
	titleLabel.Font = Enum.Font.GothamMedium
	titleLabel.Text = title
	titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.TextScaled = true
	titleLabel.TextSize = 14 * Library._ui_scale
	titleLabel.TextTransparency = 0.5
	titleLabel.TextWrapped = true
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.AnchorPoint = Vector2.new(0, 0.5)
	titleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.BackgroundTransparency = 1
	titleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	titleLabel.BorderSizePixel = 0
	titleLabel.Position = UDim2.new(0, 0, 0.4, 0)
	titleLabel.Size = UDim2.new(0, 172 * Library._ui_scale, 0, 12 * Library._ui_scale)
	titleLabel.Parent = slider
	
	local titleConstraint = Instance.new("UITextSizeConstraint")
	titleConstraint.MaxTextSize = 12 * Library._ui_scale
	titleConstraint.MinTextSize = 12 * Library._ui_scale
	titleConstraint.Parent = titleLabel
	
	local valueLabel = Instance.new("TextLabel")
	valueLabel.Name = "Value"
	valueLabel.Font = Enum.Font.GothamMedium
	valueLabel.Text = tostring(defaultVal)
	valueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	valueLabel.TextScaled = true
	valueLabel.TextSize = 14 * Library._ui_scale
	valueLabel.TextTransparency = 0.5
	valueLabel.TextWrapped = true
	valueLabel.TextXAlignment = Enum.TextXAlignment.Right
	valueLabel.AnchorPoint = Vector2.new(1, 0.5)
	valueLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	valueLabel.BackgroundTransparency = 1
	valueLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	valueLabel.BorderSizePixel = 0
	valueLabel.Position = UDim2.new(1, 0, 0.4, 0)
	valueLabel.Size = UDim2.new(0, 42 * Library._ui_scale, 0, 12 * Library._ui_scale)
	valueLabel.Parent = slider
	
	local valueConstraint = Instance.new("UITextSizeConstraint")
	valueConstraint.MaxTextSize = 12 * Library._ui_scale
	valueConstraint.MinTextSize = 12 * Library._ui_scale
	valueConstraint.Parent = valueLabel
	
	local drag = Instance.new("TextButton")
	drag.Name = "Drag"
	drag.AnchorPoint = Vector2.new(0.5, 1)
	drag.BackgroundColor3 = Color3.fromRGB(48, 48, 48)
	drag.BackgroundTransparency = 0.5
	drag.BorderColor3 = Color3.fromRGB(0, 0, 0)
	drag.BorderSizePixel = 0
	drag.Position = UDim2.new(0.5, 0, 0.8, 0)
	drag.Size = UDim2.new(0, 217 * Library._ui_scale, 0, 4 * Library._ui_scale)
	drag.Text = ""
	drag.Parent = slider
	
	local dragCorner = Instance.new("UICorner")
	dragCorner.Parent = drag
	
	local fill = Instance.new("Frame")
	fill.Name = "Fill"
	fill.AnchorPoint = Vector2.new(0, 0.5)
	fill.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	fill.BackgroundTransparency = 0.5
	fill.Position = UDim2.new(0, 0, 0.5, 0)
	fill.Size = UDim2.new((defaultVal - min) / (max - min), 0, 0, 4 * Library._ui_scale)
	fill.Parent = drag
	
	local fillCorner = Instance.new("UICorner")
	fillCorner.Parent = fill
	
	local circle = Instance.new("Frame")
	circle.BorderColor3 = Color3.fromRGB(0, 0, 0)
	circle.AnchorPoint = Vector2.new(1, 0.5)
	circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	circle.BorderColor3 = Color3.fromRGB(0, 0, 0)
	circle.BorderSizePixel = 0
	circle.Position = UDim2.new(1, 0, 0.5, 0)
	circle.Size = UDim2.new(0, 6 * Library._ui_scale, 0, 6 * Library._ui_scale)
	circle.Parent = fill
	
	local circleCorner = Instance.new("UICorner")
	circleCorner.CornerRadius = UDim.new(1, 0)
	circleCorner.Parent = circle
	
	local dragging = false
	local currentValue = defaultVal
	
	local function updateSlider(relativePos)
		relativePos = math.clamp(relativePos, 0, 1)
		currentValue = math.floor(min + (max - min) * relativePos + 0.5)
		valueLabel.Text = tostring(currentValue)
		SaveValue(title, "Int", currentValue)
		
		TweenService:Create(fill, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
			Size = UDim2.new(relativePos, 0, 0, 4 * Library._ui_scale)
		}):Play()
		
		Config.Sliders[title] = {
			Slider = slider,
			Value = currentValue,
			Min = min,
			Max = max,
			Callback = callback
		}
		
		if callback then
			callback(currentValue)
		end
	end
	
	drag.MouseButton1Down:Connect(function()
		dragging = true
		local mouse = game.Players.LocalPlayer:GetMouse()
		local relativePos = (mouse.X - drag.AbsolutePosition.X) / drag.AbsoluteSize.X
		updateSlider(relativePos)
	end)
	
	local dragMoveConnection
	drag.MouseButton1Down:Connect(function()
		dragMoveConnection = UserInputService.InputChanged:Connect(function(input)
			if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
				local abs_pos = drag.AbsolutePosition
				local abs_size = drag.AbsoluteSize
				local input_x = input.Position.X
				local relativePos = (input_x - abs_pos.X) / abs_size.X
				updateSlider(relativePos)
			end
		end)
	end)
	
	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = false
			if dragMoveConnection then
				dragMoveConnection:Disconnect()
			end
		end
	end)
	
	Config.Sliders[title] = {
		Slider = slider,
		Value = currentValue,
		Min = min,
		Max = max,
		Callback = callback
	}
	
	return slider
end

function FlowUI:CreateKeybind(parent, title, defaultKey, callback)
	local default = LoadValue(title, defaultKey or "R", "String")
	local keybind = Instance.new("TextButton")
	keybind.Name = "Keybind"
	keybind.Font = Enum.Font.SourceSans
	keybind.Text = ""
	keybind.TextColor3 = Color3.fromRGB(0, 0, 0)
	keybind.TextSize = 14 * Library._ui_scale
	keybind.AutoButtonColor = false
	keybind.AnchorPoint = Vector2.new(1, 0.5)
	keybind.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	keybind.BackgroundTransparency = 1
	keybind.BorderColor3 = Color3.fromRGB(0, 0, 0)
	keybind.BorderSizePixel = 0
	keybind.Position = UDim2.new(1, -33 * Library._ui_scale, 0.5, 0)
	keybind.Size = UDim2.new(0, 33 * Library._ui_scale, 0, 28 * Library._ui_scale)
	keybind.Parent = parent
	
	local background = Instance.new("Frame")
	background.Name = "Background"
	background.AnchorPoint = Vector2.new(0.5, 0.5)
	background.BackgroundColor3 = Color3.fromRGB(62, 62, 62)
	background.BackgroundTransparency = 0.5
	background.BorderColor3 = Color3.fromRGB(0, 0, 0)
	background.BorderSizePixel = 0
	background.Position = UDim2.new(0.5, 0, 0.5, 0)
	background.Size = UDim2.new(0, 20 * Library._ui_scale, 0, 20 * Library._ui_scale)
	background.Parent = keybind
	
	local backgroundCorner = Instance.new("UICorner")
	backgroundCorner.CornerRadius = UDim.new(0, 4 * Library._ui_scale)
	backgroundCorner.Parent = background
	
	local keyString = Instance.new("TextLabel")
	keyString.Name = "String"
	keyString.Font = Enum.Font.Gotham
	keyString.Text = default
	keyString.TextColor3 = Color3.fromRGB(255, 255, 255)
	keyString.TextSize = 10 * Library._ui_scale
	keyString.TextTransparency = 0.5
	keyString.AnchorPoint = Vector2.new(0.5, 0.5)
	keyString.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	keyString.BackgroundTransparency = 1
	keyString.BorderColor3 = Color3.fromRGB(0, 0, 0)
	keyString.BorderSizePixel = 0
	keyString.Position = UDim2.new(0.5, 0, 0.5, 0)
	keyString.Size = UDim2.new(0, 12 * Library._ui_scale, 0, 12 * Library._ui_scale)
	keyString.Parent = background
	
	local stringConstraint = Instance.new("UITextSizeConstraint")
	stringConstraint.MaxTextSize = 11 * Library._ui_scale
	stringConstraint.MinTextSize = 11 * Library._ui_scale
	stringConstraint.Parent = keyString
	
	local titleLabel
	if not string.find(parent.Name, "Header") then
		titleLabel = Instance.new("TextLabel")
		titleLabel.Name = "Title"
		titleLabel.Font = Enum.Font.Gotham
		titleLabel.Text = title
		titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		titleLabel.TextScaled = true
		titleLabel.TextSize = 14 * Library._ui_scale
		titleLabel.TextTransparency = 0.5
		titleLabel.TextWrapped = true
		titleLabel.TextXAlignment = Enum.TextXAlignment.Left
		titleLabel.AnchorPoint = Vector2.new(0, 0.5)
		titleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		titleLabel.BackgroundTransparency = 1
		titleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
		titleLabel.BorderSizePixel = 0
		titleLabel.Position = UDim2.new(1, 0, 0.5, 0)
		titleLabel.Size = UDim2.new(0, 156 * Library._ui_scale, 0, 12 * Library._ui_scale)
		titleLabel.Parent = keybind
		
		local titleConstraint = Instance.new("UITextSizeConstraint")
		titleConstraint.MaxTextSize = 12 * Library._ui_scale
		titleConstraint.MinTextSize = 12 * Library._ui_scale
		titleConstraint.Parent = titleLabel
	end
	
	local listening = false
	local currentKey = default
	local connection = nil
	local activationConnection = nil
	
	local function setupActivation()
		if activationConnection then
			activationConnection:Disconnect()
		end
		
		activationConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
			if not gameProcessed and not listening and input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode.Name == currentKey then
				if callback then
					callback(currentKey)
				end
			end
		end)
	end
	
	keybind.MouseButton1Click:Connect(function()
		if not listening then
			listening = true
			keyString.Text = "..."
			keyString.TextTransparency = 0.2
			
			CreateTween(background, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(100, 100, 100)})
			
			connection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
				if input.UserInputType == Enum.UserInputType.Keyboard and not gameProcessed then
					local keyName = input.KeyCode.Name
					currentKey = keyName
					keyString.Text = keyName
					SaveValue(title, "String", keyName)
					keyString.TextTransparency = 0.5
					listening = false
					
					CreateTween(background, TweenInfo.new(0.1, Enum.EasingStyle.Quad), {BackgroundColor3 = Color3.fromRGB(62, 62, 62)})
					
					if connection then
						connection:Disconnect()
						connection = nil
					end
					
					Config.Keybinds[title] = {
						Keybind = keybind,
						Key = currentKey,
						Callback = callback
					}
					
					setupActivation()
				end
			end)
		end
	end)
	
	setupActivation()
	
	SaveValue(title, "String", currentKey)
	
	Config.Keybinds[title] = {
		Keybind = keybind,
		Key = currentKey,
		Callback = callback
	}
	
	return keybind
end

function FlowUI:CreateToggle(parent, title, defaultState, callback)
	local default = LoadValue(title, defaultState or false, "Bool")
	local onColor = Color3.fromRGB(255, 255, 255)
	local offColor = Color3.fromRGB(60, 60, 60)
	local onCircleColor = onColor
	local offCircleColor = Color3.fromRGB(120, 120, 120)
	
	local toggle = Instance.new("TextButton")
	toggle.Name = "Toggle"
	toggle.Font = Enum.Font.SourceSans
	toggle.Text = ""
	toggle.TextColor3 = Color3.fromRGB(0, 0, 0)
	toggle.TextSize = 14 * Library._ui_scale
	toggle.AutoButtonColor = false
	toggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	toggle.BackgroundTransparency = 1
	toggle.BorderColor3 = Color3.fromRGB(0, 0, 0)
	toggle.BorderSizePixel = 0
	toggle.Size = UDim2.new(0, 216 * Library._ui_scale, 0, 27 * Library._ui_scale)
	toggle.Parent = parent
	
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = "Title"
	titleLabel.Font = Enum.Font.GothamMedium
	titleLabel.Text = title
	titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.TextScaled = true
	titleLabel.TextSize = 14 * Library._ui_scale
	titleLabel.TextTransparency = 0.5
	titleLabel.TextWrapped = true
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.AnchorPoint = Vector2.new(0, 0.5)
	titleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.BackgroundTransparency = 1
	titleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	titleLabel.BorderSizePixel = 0
	titleLabel.Position = UDim2.new(0, 0, 0.5, 0)
	titleLabel.Size = UDim2.new(0, 172 * Library._ui_scale, 0, 12 * Library._ui_scale)
	titleLabel.Parent = toggle
	
	local titleConstraint = Instance.new("UITextSizeConstraint")
	titleConstraint.MaxTextSize = 12 * Library._ui_scale
	titleConstraint.MinTextSize = 12 * Library._ui_scale
	titleConstraint.Parent = titleLabel
	
	local toggleBG = Instance.new("Frame")
	toggleBG.Name = "ToggleBG"
	toggleBG.BackgroundTransparency = 0.7
	toggleBG.Position = UDim2.new(0.82, 0, 0.3, 0)
	toggleBG.BorderColor3 = Color3.fromRGB(0, 0, 0)
	toggleBG.Size = UDim2.new(0, 25 * Library._ui_scale, 0, 12 * Library._ui_scale)
	toggleBG.BorderSizePixel = 0
	toggleBG.BackgroundColor3 = default and onColor or offColor
	toggleBG.Parent = toggle
	
	local toggleCorner = Instance.new("UICorner")
	toggleCorner.CornerRadius = UDim.new(1, 0)
	toggleCorner.Parent = toggleBG
	
	local circle = Instance.new("Frame")
	circle.BorderColor3 = Color3.fromRGB(0, 0, 0)
	circle.AnchorPoint = Vector2.new(0, 0.5)
	circle.BackgroundTransparency = 0.2
	circle.Position = default and UDim2.new(0.53, 0, 0.5, 0) or UDim2.new(0, 0, 0.5, 0)
	circle.Name = "Circle"
	circle.Size = UDim2.new(0, 12 * Library._ui_scale, 0, 12 * Library._ui_scale)
	circle.BorderSizePixel = 0
	circle.BackgroundColor3 = default and onCircleColor or offCircleColor
	circle.Parent = toggleBG
	
	local circleCorner = Instance.new("UICorner")
	circleCorner.CornerRadius = UDim.new(1, 0)
	circleCorner.Parent = circle
	
	local state = default
	
	toggle.MouseButton1Click:Connect(function()
		state = not state
		SaveValue(title, "Bool", state)
		
		if state then
			TweenService:Create(toggleBG, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				BackgroundColor3 = onColor
			}):Play()

			TweenService:Create(circle, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				BackgroundColor3 = onCircleColor,
				Position = UDim2.fromScale(0.53, 0.5)
			}):Play()
		else
			TweenService:Create(toggleBG, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				BackgroundColor3 = offColor
			}):Play()

			TweenService:Create(circle, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				BackgroundColor3 = offCircleColor,
				Position = UDim2.fromScale(0, 0.5)
			}):Play()
		end
		
		Config.Toggles[title] = {
			Toggle = toggle,
			State = state,
			Callback = callback
		}
		
		if callback then
			callback(state)
		end
	end)
	
	Config.Toggles[title] = {
		Toggle = toggle,
		State = state,
		Callback = callback
	}
	
	return toggle
end

function FlowUI:CreateCheckbox(parent, title, defaultState, callback)
	local default = LoadValue(title, defaultState or false, "Bool")
	local onColor = Color3.fromRGB(255, 255, 255)
	local offColor = Color3.fromRGB(60, 60, 60)
	
	local checkbox = Instance.new("TextButton")
	checkbox.Name = "Checkbox"
	checkbox.Font = Enum.Font.SourceSans
	checkbox.Text = ""
	checkbox.TextColor3 = Color3.fromRGB(0, 0, 0)
	checkbox.TextSize = 14 * Library._ui_scale
	checkbox.AutoButtonColor = false
	checkbox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	checkbox.BackgroundTransparency = 1
	checkbox.BorderColor3 = Color3.fromRGB(0, 0, 0)
	checkbox.BorderSizePixel = 0
	checkbox.Size = UDim2.new(0, 216 * Library._ui_scale, 0, 20 * Library._ui_scale)
	checkbox.Parent = parent
	
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = "Title"
	titleLabel.Font = Enum.Font.GothamMedium
	titleLabel.Text = title
	titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.TextScaled = true
	titleLabel.TextSize = 14 * Library._ui_scale
	titleLabel.TextTransparency = 0.2
	titleLabel.TextWrapped = true
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.AnchorPoint = Vector2.new(0, 0.5)
	titleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.BackgroundTransparency = 1
	titleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	titleLabel.BorderSizePixel = 0
	titleLabel.Position = UDim2.new(0, 0, 0.5, 0)
	titleLabel.Size = UDim2.new(0, 142 * Library._ui_scale, 0, 13 * Library._ui_scale)
	titleLabel.Parent = checkbox
	
	local titleConstraint = Instance.new("UITextSizeConstraint")
	titleConstraint.MaxTextSize = 11 * Library._ui_scale
	titleConstraint.MinTextSize = 11 * Library._ui_scale
	titleConstraint.Parent = titleLabel
	
	local box = Instance.new("Frame")
	box.Name = "Box"
	box.BorderColor3 = Color3.fromRGB(0, 0, 0)
	box.AnchorPoint = Vector2.new(1, 0.5)
	box.BackgroundTransparency = default and 0.7 or 0.9
	box.Position = UDim2.new(1, 0, 0.5, 0)
	box.Size = UDim2.new(0, 15 * Library._ui_scale, 0, 15 * Library._ui_scale)
	box.BorderSizePixel = 0
	box.BackgroundColor3 = default and onColor or offColor
	box.Parent = checkbox
	
	local boxCorner = Instance.new("UICorner")
	boxCorner.CornerRadius = UDim.new(0, 4 * Library._ui_scale)
	boxCorner.Parent = box
	
	local fill = Instance.new("Frame")
	fill.AnchorPoint = Vector2.new(0.5, 0.5)
	fill.BackgroundTransparency = 0.2
	fill.Position = UDim2.new(0.5, 0, 0.5, 0)
	fill.BorderColor3 = Color3.fromRGB(0, 0, 0)
	fill.Name = "Fill"
	fill.BorderSizePixel = 0
	fill.BackgroundColor3 = onColor
	fill.Size = default and UDim2.fromOffset(9 * Library._ui_scale, 9 * Library._ui_scale) or UDim2.fromOffset(0, 0)
	fill.Parent = box
	
	local fillCorner = Instance.new("UICorner")
	fillCorner.CornerRadius = UDim.new(0, 3 * Library._ui_scale)
	fillCorner.Parent = fill
	
	local state = default
	
	local function changeState(newState)
		state = newState
		SaveValue(title, "Bool", state)
		if state then
			TweenService:Create(box, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				BackgroundColor3 = onColor,
				BackgroundTransparency = 0.7
			}):Play()
			TweenService:Create(fill, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				Size = UDim2.fromOffset(9 * Library._ui_scale, 9 * Library._ui_scale)
			}):Play()
		else
			TweenService:Create(box, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				BackgroundColor3 = offColor,
				BackgroundTransparency = 0.9
			}):Play()
			TweenService:Create(fill, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				Size = UDim2.fromOffset(0, 0)
			}):Play()
		end
		
		Config.Checkboxes[title] = {
			Checkbox = checkbox,
			State = state,
			Callback = callback
		}
		
		if callback then
			callback(state)
		end
	end
	
	checkbox.MouseButton1Click:Connect(function()
		changeState(not state)
	end)
	
	local keybind = self:CreateKeybind(checkbox, title .. " Keybind", "None", function(key)
		if key == "None" then return end
		changeState(not state)
	end)
	keybind.Visible = false
	
	Config.Checkboxes[title] = {
		Checkbox = checkbox,
		State = state,
		Keybind = keybind,
		Callback = callback
	}
	
	return checkbox
end

function FlowUI:CreateTextBox(parent, title, default, callback)
	local defaultVal = LoadValue(title, default or "", "String")
	local textbox = Instance.new("TextButton")
	textbox.Name = "TextBox"
	textbox.Font = Enum.Font.SourceSans
	textbox.Text = ""
	textbox.TextColor3 = Color3.fromRGB(0, 0, 0)
	textbox.TextSize = 14 * Library._ui_scale
	textbox.AutoButtonColor = false
	textbox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	textbox.BackgroundTransparency = 1
	textbox.BorderColor3 = Color3.fromRGB(0, 0, 0)
	textbox.BorderSizePixel = 0
	textbox.Size = UDim2.new(0, 216 * Library._ui_scale, 0, 27 * Library._ui_scale)
	textbox.Parent = parent
	
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = "Title"
	titleLabel.Font = Enum.Font.GothamMedium
	titleLabel.Text = title
	titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.TextScaled = true
	titleLabel.TextSize = 14 * Library._ui_scale
	titleLabel.TextTransparency = 0.5
	titleLabel.TextWrapped = true
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.AnchorPoint = Vector2.new(0, 0.5)
	titleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.BackgroundTransparency = 1
	titleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	titleLabel.BorderSizePixel = 0
	titleLabel.Position = UDim2.new(0, 0, 0.4, 0)
	titleLabel.Size = UDim2.new(0, 172 * Library._ui_scale, 0, 12 * Library._ui_scale)
	titleLabel.Parent = textbox
	
	local titleConstraint = Instance.new("UITextSizeConstraint")
	titleConstraint.MaxTextSize = 12 * Library._ui_scale
	titleConstraint.MinTextSize = 12 * Library._ui_scale
	titleConstraint.Parent = titleLabel
	
	local input = Instance.new("TextBox")
	input.Name = "Input"
	input.Font = Enum.Font.Gotham
	input.Text = defaultVal
	input.TextColor3 = Color3.fromRGB(255, 255, 255)
	input.TextSize = 12 * Library._ui_scale
	input.BackgroundColor3 = Color3.fromRGB(48, 48, 48)
	input.BackgroundTransparency = 0.5
	input.BorderColor3 = Color3.fromRGB(0, 0, 0)
	input.BorderSizePixel = 0
	input.Position = UDim2.new(0.5, 0, 0.7, 0)
	input.AnchorPoint = Vector2.new(0.5, 0)
	input.Size = UDim2.new(0, 217 * Library._ui_scale, 0, 18 * Library._ui_scale)
	input.TextXAlignment = Enum.TextXAlignment.Left
	input.Parent = textbox
	
	local inputCorner = Instance.new("UICorner")
	inputCorner.CornerRadius = UDim.new(0, 5 * Library._ui_scale)
	inputCorner.Parent = input
	
	local inputConstraint = Instance.new("UITextSizeConstraint")
	inputConstraint.MaxTextSize = 12 * Library._ui_scale
	inputConstraint.MinTextSize = 12 * Library._ui_scale
	inputConstraint.Parent = input
	
	input.FocusLost:Connect(function(enterPressed)
		local text = input.Text
		SaveValue(title, "String", text)
		Config.TextBoxes[title] = {
			TextBox = textbox,
			Value = text,
			Callback = callback
		}
		if callback then
			callback(text, enterPressed)
		end
	end)
	
	input:GetPropertyChangedSignal("Text"):Connect(function()
		local text = input.Text
		Config.TextBoxes[title] = {
			TextBox = textbox,
			Value = text,
			Callback = callback
		}
	end)
	
	SaveValue(title, "String", defaultVal)
	
	return textbox
end

function FlowUI:CreateColorPicker(parent, title, defaultColor, callback, moduleData)
	local scale = Library._ui_scale
	defaultColor = defaultColor or Color3.fromRGB(255, 255, 255)
	local defaultHex = rgbToHex(defaultColor.R * 255, defaultColor.G * 255, defaultColor.B * 255)
	local saved = LoadValue(title, defaultHex, "String")
	local hex, alphaStr
	if string.find(saved, ",") then
		local parts = string.split(saved, ",")
		hex = parts[1]
		alphaStr = parts[2] or "100"
	else
		hex = saved
		alphaStr = "100"
	end
	local currentColor = hexToRgb(hex)
	local currentAlpha = tonumber(alphaStr) / 100
	
	local colorElement = Instance.new("TextButton")
	colorElement.Name = "ColorPicker"
	colorElement.Font = Enum.Font.SourceSans
	colorElement.Text = ""
	colorElement.TextColor3 = Color3.fromRGB(0, 0, 0)
	colorElement.TextSize = 14 * scale
	colorElement.AutoButtonColor = false
	colorElement.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	colorElement.BackgroundTransparency = 1
	colorElement.BorderColor3 = Color3.fromRGB(0, 0, 0)
	colorElement.BorderSizePixel = 0
	colorElement.Size = UDim2.new(0, 216 * scale, 0, 27 * scale)
	colorElement.Parent = parent
	
	local titleLabel = Instance.new("TextLabel")
	titleLabel.Name = "Title"
	titleLabel.Font = Enum.Font.GothamMedium
	titleLabel.Text = title
	titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.TextScaled = true
	titleLabel.TextSize = 14 * scale
	titleLabel.TextTransparency = 0.5
	titleLabel.TextWrapped = true
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.AnchorPoint = Vector2.new(0, 0.5)
	titleLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.BackgroundTransparency = 1
	titleLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
	titleLabel.BorderSizePixel = 0
	titleLabel.Position = UDim2.new(0, 0, 0.5, 0)
	titleLabel.Size = UDim2.new(0, 172 * scale, 0, 12 * scale)
	titleLabel.Parent = colorElement
	
	local titleConstraint = Instance.new("UITextSizeConstraint")
	titleConstraint.MaxTextSize = 12 * scale
	titleConstraint.MinTextSize = 12 * scale
	titleConstraint.Parent = titleLabel
	
	local swatch = Instance.new("TextButton")
	swatch.Name = "Swatch"
	swatch.AnchorPoint = Vector2.new(1, 0.5)
	swatch.BackgroundColor3 = currentColor
	swatch.BackgroundTransparency = 1 - currentAlpha
	swatch.BorderColor3 = Color3.fromRGB(255, 255, 255)
	swatch.BorderSizePixel = 1
	swatch.Position = UDim2.new(1, 0, 0.5, 0)
	swatch.Size = UDim2.new(0, 40 * scale, 0, 20 * scale)
	swatch.Text = ""
	swatch.AutoButtonColor = false
	swatch.Parent = colorElement
	
	local swatchCorner = Instance.new("UICorner")
	swatchCorner.CornerRadius = UDim.new(0, 4 * scale)
	swatchCorner.Parent = swatch
	
	local picker = ColorPicker.new(function(col, alp)
		swatch.BackgroundColor3 = col
		swatch.BackgroundTransparency = 1 - alp
		SaveValue(title, "String", rgbToHex(col.R * 255, col.G * 255, col.B * 255) .. "," .. math.floor(alp * 100))
		if callback then
			callback(col, alp)
		end
		if moduleData and moduleData.UpdateSize then
			moduleData.UpdateSize()
		end
	end, scale)
	
	picker:setColor(currentColor, currentAlpha)
	
	swatch.MouseButton1Click:Connect(function()
		picker.container.Visible = not picker.container.Visible
	end)
	
	colorElement.MouseButton1Click:Connect(function()
		picker.container.Visible = not picker.container.Visible
	end)
	
	if moduleData and moduleData.UpdateSize then
		moduleData.UpdateSize()
	end
	
	Config.ColorPickers[title] = {
		Element = colorElement,
		Swatch = swatch,
		Picker = picker,
		Color = currentColor,
		Alpha = currentAlpha,
		Callback = callback
	}
	
	return colorElement
end
